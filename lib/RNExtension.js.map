{"version":3,"sources":["../src/RNExtension.js"],"names":["RNWebGLTextureManager","middlewares","addMiddleware","middleware","push","createWithContext","gl","ctxId","reduce","ext","loadTexture","create","config","then","objId","width","height","texture","unloadTexture","destroy","id","endFrame","__endFrame","bind","readPixelsToTemporaryFile","__readPixelsToTemporaryFile","Error"],"mappings":";;;;;;;;AACA;;AACA;;IACQA,qB,8BAAAA,qB;;;AA8BR,IAAMC,cAAiC,EAAvC;;kBAEe;AACbC,iBAAe,uBAACC,UAAD,EAA4B;AACzCF,gBAAYG,IAAZ,CAAiBD,UAAjB;AACD,GAHY;AAIbE,qBAAmB,2BAACC,EAAD,EAA8BC,KAA9B;AAAA,WACjBN,YAAYO,MAAZ,CAAmB,UAACC,GAAD,EAAMN,UAAN;AAAA,aAAqBA,WAAWM,GAAX,CAArB;AAAA,KAAnB,EAAyD;AACvDC,mBAAa;AAAA,eACXV,sBAAsBW,MAAtB,cACKC,MADL;AAEEL;AAFF,YAGGM,IAHH,CAGQ,gBAA8B;AAAA,cAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,cAApBC,KAAoB,QAApBA,KAAoB;AAAA,cAAbC,MAAa,QAAbA,MAAa;;AACpC,cAAMC,UAAU,+BAAmBH,KAAnB,CAAhB;AACA,iBAAO,EAAEG,gBAAF,EAAWF,YAAX,EAAkBC,cAAlB,EAAP;AACD,SAND,CADW;AAAA,OAD0C;AASvDE,qBAAe;AAAA,eAAWlB,sBAAsBmB,OAAtB,CAA8BF,QAAQG,EAAtC,CAAX;AAAA,OATwC;AAUvDC,gBAAUf,GAAGgB,UAAH,CAAcC,IAAd,CAAmBjB,EAAnB,CAV6C;AAWvDkB,iCAA2BlB,GAAGmB,2BAAH,GACvBnB,GAAGmB,2BAAH,CAA+BF,IAA/B,CAAoCjB,EAApC,CADuB,GAEvB,YAAM;AACJ,cAAM,IAAIoB,KAAJ,CAAU,kDAAV,CAAN;AACD;AAfkD,KAAzD,CADiB;AAAA;AAJN,C","file":"RNExtension.js","sourcesContent":["//@flow\nimport { NativeModules } from \"react-native\";\nimport { RNWebGLTexture } from \"./webglTypes\";\nconst { RNWebGLTextureManager } = NativeModules;\n\ntype RNWebGLRenderingContext = WebGLRenderingContext & {\n  __endFrame: *,\n  __readPixelsToTemporaryFile: *\n};\n\ntype Config = Object;\n\nexport type Extension = {\n  // NB more methods can be extended with middlewares\n  loadTexture: (\n    config: Config\n  ) => Promise<{ texture: RNWebGLTexture, width: number, height: number }>,\n  unloadTexture: (texture: RNWebGLTexture) => void,\n  endFrame: () => void, // IDEA add a requestFrame() to hide the need to call endFrame\n  readPixelsToTemporaryFile: (\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    options?: {\n      format?: string,\n      quality?: number\n    }\n  ) => Promise<string>\n};\n\ntype Middleware = (extIn: Extension) => Extension;\n\nconst middlewares: Array<Middleware> = [];\n\nexport default {\n  addMiddleware: (middleware: Middleware) => {\n    middlewares.push(middleware);\n  },\n  createWithContext: (gl: RNWebGLRenderingContext, ctxId: number): Extension =>\n    middlewares.reduce((ext, middleware) => middleware(ext), {\n      loadTexture: config =>\n        RNWebGLTextureManager.create({\n          ...config,\n          ctxId\n        }).then(({ objId, width, height }) => {\n          const texture = new RNWebGLTexture(objId);\n          return { texture, width, height };\n        }),\n      unloadTexture: texture => RNWebGLTextureManager.destroy(texture.id),\n      endFrame: gl.__endFrame.bind(gl),\n      readPixelsToTemporaryFile: gl.__readPixelsToTemporaryFile\n        ? gl.__readPixelsToTemporaryFile.bind(gl)\n        : () => {\n            throw new Error(\"readPixelsToTemporaryFile is not yet implemented\");\n          }\n    })\n};\n"]}